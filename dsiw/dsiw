#!/bin/bash
#Run "su - administrator" and "sudo -i" command before running this script.
# Ensure the script is run as root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi
# Check and change hostname
current_hostname=$(hostname)
echo "Current hostname: $current_hostname"
read -p "Do you want to change the hostname? (y/n): " change_hostname

if [[ $change_hostname =~ ^[Yy]$ ]]; then
    read -p "Enter new hostname: " new_hostname
    sudo hostnamectl set-hostname $new_hostname
    echo "Hostname changed to: $new_hostname"
else
    echo "Hostname not changed."
fi
#Manage Engine setup
# Define variables
TARGET_DIR="/home/administrator/Downloads"
DMRootCA_URL="https://github.com/ssn031737/dsiw/blob/main/dsiw/ME/DMRootCA.crt"
json_URL="https://github.com/ssn031737/dsiw/blob/main/dsiw/ME/serverinfo.json"
UEMS_URL="https://github.com/ssn031737/dsiw/blob/main/dsiw/ME/UEMS_LinuxAgent.bin"

# Function to download and set up ME
download_and_setup_ME() {
    echo "Downloading required files..."
    wget -O "$TARGET_DIR/DMRootCA.crt" "$DMRootCA_URL"
    wget -O "$TARGET_DIR/serverinfo.json" "$json_URL"
    wget -O "$TARGET_DIR/UEMS_LinuxAgent.bin" "$UEMS_URL"

	
    echo "Setting execution permissions..."
    sudo chmod +x "/home/administrator/Downloads/UEMS_LinuxAgent.bin"

    echo "Running the installer..."
	cd $TARGET_DIR
    sudo ./UEMS_LinuxAgent.bin
}

# Check the status of the dcservice
if systemctl status dcservice | grep -q "active"; then
    echo "dcservice is active. ME is already installed."
	echo
else
    echo "dcservice is not active. Installing ME..."
	echo
    download_and_setup_ME
fi

# Proceed to the next process
echo "Proceeding to the next process..."
echo
echo

alias dsiw='sudo rm -rf dsiw && sudo wget https://github.com/ssn031737/dsiw/blob/main/dsiw/dsiw && sudo chmod +x dsiw && sudo ./dsiw'

#echo "Alias 'dsiw' is now set up. You can use it by typing 'dsiw' in your terminal."

# Update and install necessary packages
apt-get update && apt-get install -y sssd sssd-tools curl wget
# Download the Linux folder from GitHub to the Desktop
CRT_URL="https://github.com/ssn031737/dsiw/blob/main/dsiw/CIP/Google_2026_05_22_46666.crt"
KEY_URL="https://github.com/ssn031737/dsiw/blob/main/dsiw/CIP/Google_2026_05_22_46666.key"
TARGET_DIR="/home/administrator/Downloads"
# Download files
wget -O "$TARGET_DIR/Google_2026_05_22_46666.crt" "$CRT_URL" && echo "Downloaded CRT file."
wget -O "$TARGET_DIR/Google_2026_05_22_46666.key" "$FILE_URL" "$KEY_URL" && echo "Downloaded CRT file."
# Copy the required files and set permissions
cp -rp $TARGET_DIR/Google_2026_05_22_46666* /var/ && chmod 777 /var/Google_2026_05_22_46666*
# Configure sssd.conf
#Variable for SSSD file path
SSSD_CONF_FILE="/etc/sssd/sssd.conf"
#cat /home/administrator/Desktop/Linux/sssd_conf.txt > /etc/sssd/sssd.conf
# Define the sssd configuration content
SSSD_CONFIG="[sssd]
services = nss, pam
domains = delhivery.com

[domain/delhivery.com]
ignore_group_members = true
sudo_provider = none
cache_credentials = true
ldap_tls_cert = /var/Google_2026_05_22_46666.crt
ldap_tls_key = /var/Google_2026_05_22_46666.key
ldap_uri = ldaps://ldap.google.com:636
ldap_search_base = dc=delhivery,dc=com
id_provider = ldap
auth_provider = ldap
ldap_schema = rfc2307bis
ldap_user_uuid = entryUUID
ldap_groups_use_matching_rule_in_chain = true
ldap_initgroups_use_matching_rule_in_chain = true
enumerate = false
ldap_tls_cipher_suite = NORMAL:!VERS-TLS1.3"

# Write the new configuration to sssd.conf
echo "$SSSD_CONFIG" | sudo tee "$SSSD_CONF_FILE" > /dev/null

chown root:root /etc/sssd/sssd.conf
chmod 600 /etc/sssd/sssd.conf

# Restart sssd service
service sssd restart

# Configure custom.conf
#cat /home/administrator/Desktop/Linux/custom_conf.txt > /etc/gdm3/custom.conf

#Variable for SSSD file path
GDM_CONF_FILE="/etc/gdm3/custom.conf"

# Define the GDM configuration content:
GDM_CONFIG="#GDM configuration storage
#
# See /usr/share/gdm/gdm.schemas for a list of available options.

# Uncomment the line below to force the login screen to use Xorg
WaylandEnable=true

# Enabling automatic login
#  AutomaticLoginEnable = true
#  AutomaticLogin = user1

# Enabling timed login
#  TimedLoginEnable = true
#  TimedLogin = user1
#  TimedLoginDelay = 10

#[security]

#[xdmcp]

#[chooser]

#[debug]
# Uncomment the line below to turn on debugging
# More verbose logs
# Additionally lets the X server dump core if it crashes
#Enable=true"

# Write the new configuration to GDM config file
echo "$GDM_CONFIG" | sudo tee "$GDM_CONF_FILE" > /dev/null

# Add Google Cloud endpoint verification repository
echo "deb https://packages.cloud.google.com/apt endpoint-verification main" | sudo tee -a /etc/apt/sources.list.d/endpoint-verification.list
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# Update and install endpoint verification package
apt-get update && apt-get install -y endpoint-verification

# Display users
getent passwd

# Enable home directory creation
sudo pam-auth-update

# Instructions for the user to follow in the pop-up
echo "In the pop-up, press the down arrow & select '[*] Create home directory on login'. Update the value from blank to '*' by pressing the space button & then hit Enter."

#check configurations
echo "SSSD Service status:
sudo service sssd status | grep Active:
echo
echo
echo "SSSD config file output for verification:
cat /etc/sssd/sssd.conf
echo
echo
echo "GDM Wayland Enable verification:
cat /etc/gdm3/custom.conf | grep Wayland
echo
echo
# Prompt for reboot
read -p "Reboot the system? (y/n): " reboot_choice

if [[ $reboot_choice =~ ^[Yy]$ ]]; then
    echo "Rebooting the system..."
    sudo reboot
else
    echo "Exiting script without reboot."
    exit 0
fi